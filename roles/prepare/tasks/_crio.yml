- name: YUM info cri-o
  yum: list=cri-o
  register: yum_crio_out
  become: true

- vars:
    _crio_info: "{{ yum_crio_out.results | selectattr('yumstate', 'eq', 'installed') }}"
  set_fact:
    current_crio_version: "{{ _crio_info[0].version if (_crio_info | length > 0) else '' }}"

- assert:
    that: current_crio_version.startswith(crio_version)
    quiet: true
    fail_msg: >-
      A different version of CRI-O is installed {{ current_crio_version }}.
      CRI-O version {{ crio_version }}.
      You can set prepare_upgrade to upgrade/downgrade to {{ crio_version }}.
      Such action is dangerous and should only by used when initializing a new cluster.
  when: not prepare_upgrade

- name: Ensure Kubic libcontainers repository
  yum_repository:
    name: devel_kubic_libcontainers_stable
    description: devel_kubic_libcontainers_stable
    baseurl: 'https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ crio_os }}/'
    gpgcheck: true
    gpgkey: 'https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/{{ crio_os }}/repodata/repomd.xml.key'
    enabled: true
    
  become: true
  when: not no_yum_repo

- name: Ensure Kubic libcontainers repository
  yum_repository:
    name: devel_kubic_libcontainers_stable_cri-o_{{ crio_version }}
    description: devel_kubic_libcontainers_stable_cri-o_{{ crio_version }}
    baseurl: 'https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/{{ crio_os }}/'
    gpgcheck: true
    gpgkey: 'https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/{{ crio_version }}/{{ crio_os }}/repodata/repomd.xml.key'
    enabled: true
    exclude: cri-o

  become: true
  when: not no_yum_repo
  
- name: Ensure required CRI-O kernel module are loaded
  copy:
    dest: /etc/modules-load.d/crio.conf
    content: |
      # Ansible managed
      overlay
      br_netfilter

  become: yes
  register: modules_load_d

- name: Restart systemd-modules-load.service to reload kernel modules
  systemd: name=systemd-modules-load.service state=restarted
  become: true
  when: modules_load_d.changed

- name: Ensure CRI-O kernel configurations
  ansible.posix.sysctl:
    sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present

  become: true
  with_dict:
    net.bridge.bridge-nf-call-iptables: 1
    net.bridge.bridge-nf-call-ip6tables: 1
    net.ipv4.ip_forward: 1
  
- name: Reset container-tools
  command: yum module reset container-tools -y
  become: yes
  when: current_crio_version == '' or prepare_upgrade

- name: Switch to container-tools:rhel8
  yum:
    name: '@container-tools:rhel8/common'
    state: present
  become: true
  when: current_crio_version == '' or prepare_upgrade

- name: Ensure container-tools:rhel8 module stream is enabled
  yum:
    name: '@container-tools:rhel8/common'
    state: present

  become: yes
  when: current_crio_version == '' or prepare_upgrade

- name: Ensure cri-o package is latest
  yum:
    name: cri-o-{{ crio_version }}*
    state: "{{ prepare_upgrade | ternary('latest', 'present') }}"
    allow_downgrade: "{{ prepare_upgrade }}"
    disable_excludes: devel_kubic_libcontainers_stable_cri-o_{{ crio_version }}

  become: true

- name: Ensure example CNI configuration files are absent
  file:
    path: /etc/cni/net.d/{{ item }}
    state: absent

  become: true
  loop:
    - 100-crio-bridge.conf
    - 200-loopback.conf

- name: Ensure cri-o is started and enabled
  systemd:
    name: crio.service
    state: started
    enabled: true
    daemon_reload: true
    
  become: true
